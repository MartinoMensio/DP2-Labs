/*
 * This program elaborates a file that is specified using a system property. The file is read row by row
 * (each one of them represents a time and date in the gregorian calendar) and the most recent date is echoed out.
 * 
 * This solution uses streams, lambda expressions, "nio" library and classes for scanning and formatting dates.
 */

import java.io.*;
import java.nio.file.*;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.stream.*;

public class Exercise2 {

	public static void main(String[] args) {
		// Get the "it.polito.dp2.file" system property
		String dir = System.getProperty("it.polito.dp2.file");
		if(dir == null) {
			System.err.println("The system property it.polito.dp2.file has not been set");
			return;
		}
		// Variable for storing the maximum date found
		GregorianCalendar max = null;
		Optional<GregorianCalendar> maxOpt = null;
		try {
			// Read the input file and process it using streams
			maxOpt = Files.lines(Paths.get(dir))
			// each line is mapped to a GregorianCalendar object
			.map((String s) -> {
				// split the line into tokens by using blank characters
				String[] tokens = s.split("\\s");
				if(tokens.length != 6) {
					// on format error, skip this line and proceed with next
					System.err.println("Wrong format: expected 6 tokens in line: " + s);
					return null;
				}
				// convert tokens into Integers
				Object[] numbers = Stream.of(tokens).map(s2 -> Integer.parseInt(s2)).toArray();
				// build a GregorianCalendar object, paying attention that the month is 0-based
				return new GregorianCalendar((Integer)numbers[5], (Integer)numbers[4] - 1, (Integer)numbers[3], (Integer)numbers[0], (Integer)numbers[1], (Integer)numbers[2]);
			})
			// remove null elements (generated by wrong format in lines)
			.filter(c -> c != null)
			// find the maximum
			.max((a, b) -> a.compareTo(b));
			
			// check if the maximum is present (at least one valid GregorianCalendar object was in the stream)
			if(maxOpt.isPresent()) {
				// get the value from the Optional
				max = maxOpt.get();
			} else {
				System.err.println("No valid lines found");
				return;
			}
		} catch (IOException e) {
			// This exception can be thrown from one of the file reads, e.g. if input file does not exist with the specified name
			System.err.println("IO exception with file " + e.getMessage());
			e.printStackTrace();
			return;
		}
		
		// Now prepare the output of the Date by specifying the format wanted
		SimpleDateFormat fmt = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
		fmt.setCalendar(max);
		String dateFormatted = fmt.format(max.getTime());
		// Echo out the date formatted
		System.out.println(dateFormatted);
	}

}
